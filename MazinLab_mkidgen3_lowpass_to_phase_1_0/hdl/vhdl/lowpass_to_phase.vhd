-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lowpass_to_phase is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    instream_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    instream_TVALID : IN STD_LOGIC;
    instream_TREADY : OUT STD_LOGIC;
    instream_TUSER : IN STD_LOGIC_VECTOR (7 downto 0);
    instream_TLAST : IN STD_LOGIC;
    phase_0_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    phase_0_TVALID : OUT STD_LOGIC;
    phase_0_TREADY : IN STD_LOGIC;
    phase_1_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    phase_1_TVALID : OUT STD_LOGIC;
    phase_1_TREADY : IN STD_LOGIC;
    phase_2_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    phase_2_TVALID : OUT STD_LOGIC;
    phase_2_TREADY : IN STD_LOGIC;
    phase_3_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    phase_3_TVALID : OUT STD_LOGIC;
    phase_3_TREADY : IN STD_LOGIC;
    phase_0_TUSER : OUT STD_LOGIC_VECTOR (8 downto 0);
    phase_1_TUSER : OUT STD_LOGIC_VECTOR (8 downto 0);
    phase_2_TUSER : OUT STD_LOGIC_VECTOR (8 downto 0);
    phase_3_TUSER : OUT STD_LOGIC_VECTOR (8 downto 0);
    phase_0_TLAST : OUT STD_LOGIC;
    phase_1_TLAST : OUT STD_LOGIC;
    phase_2_TLAST : OUT STD_LOGIC;
    phase_3_TLAST : OUT STD_LOGIC;
    phases_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    phases_TVALID : OUT STD_LOGIC;
    phases_TREADY : IN STD_LOGIC;
    phases_TUSER : OUT STD_LOGIC_VECTOR (8 downto 0);
    phases_TLAST : OUT STD_LOGIC );
end;


architecture behav of lowpass_to_phase is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lowpass_to_phase,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.477937,HLS_SYN_LAT=21,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6163,HLS_SYN_LUT=13631,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_20 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_const_lv10_3F : STD_LOGIC_VECTOR (9 downto 0) := "0000111111";
    constant ap_const_lv10_40 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_const_lv10_5F : STD_LOGIC_VECTOR (9 downto 0) := "0001011111";
    constant ap_const_lv10_60 : STD_LOGIC_VECTOR (9 downto 0) := "0001100000";
    constant ap_const_lv10_7F : STD_LOGIC_VECTOR (9 downto 0) := "0001111111";
    constant ap_const_lv10_80 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_const_lv10_9F : STD_LOGIC_VECTOR (9 downto 0) := "0010011111";
    constant ap_const_lv10_A0 : STD_LOGIC_VECTOR (9 downto 0) := "0010100000";
    constant ap_const_lv10_BF : STD_LOGIC_VECTOR (9 downto 0) := "0010111111";
    constant ap_const_lv10_C0 : STD_LOGIC_VECTOR (9 downto 0) := "0011000000";
    constant ap_const_lv10_DF : STD_LOGIC_VECTOR (9 downto 0) := "0011011111";
    constant ap_const_lv10_E0 : STD_LOGIC_VECTOR (9 downto 0) := "0011100000";
    constant ap_const_lv10_FF : STD_LOGIC_VECTOR (9 downto 0) := "0011111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv16_8001 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal read_r : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal in_data_V_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in_data_V_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in_data_V_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in_data_V_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in_user_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal in_last : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal instream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal read_load_load_fu_327_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal phase_0_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal phase_1_TDATA_blk_n : STD_LOGIC;
    signal phase_2_TDATA_blk_n : STD_LOGIC;
    signal phase_3_TDATA_blk_n : STD_LOGIC;
    signal phases_TDATA_blk_n : STD_LOGIC;
    signal tmpphases_user_V_reg_249 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state21_io : BOOLEAN;
    signal regslice_both_phase_0_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_phase_1_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_phase_2_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_phase_3_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_phases_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state22_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmpphases_user_V_reg_249_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter10_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter11_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter12_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter13_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter14_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter15_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter16_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter17_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter18_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmpphases_user_V_reg_249_pp0_iter19_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal out_user_V_fu_363_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln321_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_user_V_1_fu_491_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln_reg_992 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln414_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_997 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_1_reg_1002 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln414_1_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_1_reg_1007 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_2_reg_1012 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln414_2_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_2_reg_1017 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_3_reg_1022 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln414_3_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_3_reg_1027 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_4_reg_1032 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln414_4_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_4_reg_1037 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_5_reg_1042 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln414_5_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_5_reg_1047 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_6_reg_1052 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln414_6_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_6_reg_1057 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_7_reg_1062 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln414_7_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_7_reg_1067 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_fu_831_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_reg_1072 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_1_fu_843_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_1_reg_1077 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_2_fu_855_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_2_reg_1082 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_3_fu_867_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_3_reg_1087 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_4_fu_879_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_4_reg_1092 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_5_fu_891_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_5_reg_1097 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_6_fu_903_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_6_reg_1102 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_7_fu_915_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_7_reg_1107 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cordic_base_fu_299_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cordic_base_fu_306_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cordic_base_fu_313_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cordic_base_fu_320_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal grp_cordic_base_fu_299_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call24 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call24 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call24 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call24 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call24 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call24 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call24 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call24 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call24 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call24 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call24 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call24 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call24 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call24 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call24 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15_ignore_call24 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16_ignore_call24 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17_ignore_call24 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18_ignore_call24 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19_ignore_call24 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20_ignore_call24 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21_ignore_call24 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp125 : BOOLEAN;
    signal grp_cordic_base_fu_306_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call42 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call42 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call42 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call42 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call42 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call42 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call42 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call42 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call42 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call42 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call42 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call42 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call42 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call42 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call42 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15_ignore_call42 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16_ignore_call42 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17_ignore_call42 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18_ignore_call42 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19_ignore_call42 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20_ignore_call42 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21_ignore_call42 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp126 : BOOLEAN;
    signal grp_cordic_base_fu_313_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call60 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call60 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call60 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call60 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call60 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call60 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call60 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call60 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call60 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call60 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call60 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call60 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call60 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call60 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call60 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15_ignore_call60 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16_ignore_call60 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17_ignore_call60 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18_ignore_call60 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19_ignore_call60 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20_ignore_call60 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21_ignore_call60 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp127 : BOOLEAN;
    signal grp_cordic_base_fu_320_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call78 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call78 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call78 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call78 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call78 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call78 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call78 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call78 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call78 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call78 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call78 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call78 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call78 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call78 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call78 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15_ignore_call78 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16_ignore_call78 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17_ignore_call78 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18_ignore_call78 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19_ignore_call78 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20_ignore_call78 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21_ignore_call78 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp128 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_cart_V_3_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_cart_V_3_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_cart_V_2_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_cart_V_2_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_cart_V_1_reg_231 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_cart_V_1_reg_231 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_cart_V_0_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_cart_V_0_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_tmpphases_user_V_reg_249 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter1_tmpphases_user_V_reg_249 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter2_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter3_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter4_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter5_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter6_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter7_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter8_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter9_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter10_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter11_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter12_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter13_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter14_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter15_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter16_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter17_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter18_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter19_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter20_tmpphases_last_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_allocacmp_read_load : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_355_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_515_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln414_fu_523_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_527_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_553_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_561_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln414_1_fu_569_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_595_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln414_1_fu_603_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln414_4_fu_607_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_633_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_641_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln414_5_fu_649_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_675_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln414_2_fu_683_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln414_2_fu_687_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_713_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_721_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln414_6_fu_729_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_755_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln414_3_fu_763_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln414_3_fu_767_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_793_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_801_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln414_7_fu_809_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_fu_825_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_fu_828_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_1_fu_837_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_1_fu_840_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_2_fu_849_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_4_fu_852_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_3_fu_861_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_5_fu_864_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_4_fu_873_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_2_fu_876_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_5_fu_885_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_6_fu_888_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_6_fu_897_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_3_fu_900_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_7_fu_909_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_7_fu_912_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_instream_data_V_U_apdone_blk : STD_LOGIC;
    signal instream_TDATA_int : STD_LOGIC_VECTOR (255 downto 0);
    signal instream_TVALID_int : STD_LOGIC;
    signal instream_TREADY_int : STD_LOGIC;
    signal regslice_both_instream_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_instream_user_V_U_apdone_blk : STD_LOGIC;
    signal instream_TUSER_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_instream_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_instream_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_instream_last_U_apdone_blk : STD_LOGIC;
    signal instream_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_instream_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_instream_last_U_ack_in : STD_LOGIC;
    signal phase_0_TVALID_int : STD_LOGIC;
    signal phase_0_TREADY_int : STD_LOGIC;
    signal regslice_both_phase_0_data_V_U_vld_out : STD_LOGIC;
    signal phase_1_TVALID_int : STD_LOGIC;
    signal phase_1_TREADY_int : STD_LOGIC;
    signal regslice_both_phase_1_data_V_U_vld_out : STD_LOGIC;
    signal phase_2_TVALID_int : STD_LOGIC;
    signal phase_2_TREADY_int : STD_LOGIC;
    signal regslice_both_phase_2_data_V_U_vld_out : STD_LOGIC;
    signal phase_3_TVALID_int : STD_LOGIC;
    signal phase_3_TREADY_int : STD_LOGIC;
    signal regslice_both_phase_3_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_phase_0_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_phase_0_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_phase_0_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_phase_1_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_phase_1_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_phase_1_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_phase_2_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_phase_2_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_phase_2_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_phase_3_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_phase_3_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_phase_3_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_phase_0_last_U_apdone_blk : STD_LOGIC;
    signal phase_0_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_phase_0_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_phase_0_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_phase_1_last_U_apdone_blk : STD_LOGIC;
    signal phase_1_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_phase_1_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_phase_1_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_phase_2_last_U_apdone_blk : STD_LOGIC;
    signal phase_2_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_phase_2_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_phase_2_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_phase_3_last_U_apdone_blk : STD_LOGIC;
    signal phase_3_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_phase_3_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_phase_3_last_U_vld_out : STD_LOGIC;
    signal phases_TDATA_int : STD_LOGIC_VECTOR (63 downto 0);
    signal phases_TVALID_int : STD_LOGIC;
    signal phases_TREADY_int : STD_LOGIC;
    signal regslice_both_phases_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_phases_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_phases_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_phases_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_phases_last_U_apdone_blk : STD_LOGIC;
    signal phases_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_phases_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_phases_last_U_vld_out : STD_LOGIC;
    signal ap_condition_548 : BOOLEAN;

    component cordic_base IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        inputData_cartesian_M_real_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        inputData_cartesian_M_imag_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_cordic_base_fu_299 : component cordic_base
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        inputData_cartesian_M_real_V_read => add_ln415_reg_1072,
        inputData_cartesian_M_imag_V_read => add_ln415_1_reg_1077,
        ap_return => grp_cordic_base_fu_299_ap_return,
        ap_ce => grp_cordic_base_fu_299_ap_ce);

    grp_cordic_base_fu_306 : component cordic_base
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        inputData_cartesian_M_real_V_read => add_ln415_2_reg_1082,
        inputData_cartesian_M_imag_V_read => add_ln415_3_reg_1087,
        ap_return => grp_cordic_base_fu_306_ap_return,
        ap_ce => grp_cordic_base_fu_306_ap_ce);

    grp_cordic_base_fu_313 : component cordic_base
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        inputData_cartesian_M_real_V_read => add_ln415_4_reg_1092,
        inputData_cartesian_M_imag_V_read => add_ln415_5_reg_1097,
        ap_return => grp_cordic_base_fu_313_ap_return,
        ap_ce => grp_cordic_base_fu_313_ap_ce);

    grp_cordic_base_fu_320 : component cordic_base
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        inputData_cartesian_M_real_V_read => add_ln415_6_reg_1102,
        inputData_cartesian_M_imag_V_read => add_ln415_7_reg_1107,
        ap_return => grp_cordic_base_fu_320_ap_return,
        ap_ce => grp_cordic_base_fu_320_ap_ce);

    regslice_both_instream_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => instream_TDATA,
        vld_in => instream_TVALID,
        ack_in => regslice_both_instream_data_V_U_ack_in,
        data_out => instream_TDATA_int,
        vld_out => instream_TVALID_int,
        ack_out => instream_TREADY_int,
        apdone_blk => regslice_both_instream_data_V_U_apdone_blk);

    regslice_both_instream_user_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => instream_TUSER,
        vld_in => instream_TVALID,
        ack_in => regslice_both_instream_user_V_U_ack_in,
        data_out => instream_TUSER_int,
        vld_out => regslice_both_instream_user_V_U_vld_out,
        ack_out => instream_TREADY_int,
        apdone_blk => regslice_both_instream_user_V_U_apdone_blk);

    regslice_both_w1_instream_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => instream_TLAST,
        vld_in => instream_TVALID,
        ack_in => regslice_both_w1_instream_last_U_ack_in,
        data_out => instream_TLAST_int,
        vld_out => regslice_both_w1_instream_last_U_vld_out,
        ack_out => instream_TREADY_int,
        apdone_blk => regslice_both_w1_instream_last_U_apdone_blk);

    regslice_both_phase_0_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_cordic_base_fu_299_ap_return,
        vld_in => phase_0_TVALID_int,
        ack_in => phase_0_TREADY_int,
        data_out => phase_0_TDATA,
        vld_out => regslice_both_phase_0_data_V_U_vld_out,
        ack_out => phase_0_TREADY,
        apdone_blk => regslice_both_phase_0_data_V_U_apdone_blk);

    regslice_both_phase_1_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_cordic_base_fu_306_ap_return,
        vld_in => phase_1_TVALID_int,
        ack_in => phase_1_TREADY_int,
        data_out => phase_1_TDATA,
        vld_out => regslice_both_phase_1_data_V_U_vld_out,
        ack_out => phase_1_TREADY,
        apdone_blk => regslice_both_phase_1_data_V_U_apdone_blk);

    regslice_both_phase_2_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_cordic_base_fu_313_ap_return,
        vld_in => phase_2_TVALID_int,
        ack_in => phase_2_TREADY_int,
        data_out => phase_2_TDATA,
        vld_out => regslice_both_phase_2_data_V_U_vld_out,
        ack_out => phase_2_TREADY,
        apdone_blk => regslice_both_phase_2_data_V_U_apdone_blk);

    regslice_both_phase_3_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_cordic_base_fu_320_ap_return,
        vld_in => phase_3_TVALID_int,
        ack_in => phase_3_TREADY_int,
        data_out => phase_3_TDATA,
        vld_out => regslice_both_phase_3_data_V_U_vld_out,
        ack_out => phase_3_TREADY,
        apdone_blk => regslice_both_phase_3_data_V_U_apdone_blk);

    regslice_both_phase_0_user_V_U : component regslice_both
    generic map (
        DataWidth => 9)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmpphases_user_V_reg_249_pp0_iter19_reg,
        vld_in => phase_0_TVALID_int,
        ack_in => regslice_both_phase_0_user_V_U_ack_in_dummy,
        data_out => phase_0_TUSER,
        vld_out => regslice_both_phase_0_user_V_U_vld_out,
        ack_out => phase_0_TREADY,
        apdone_blk => regslice_both_phase_0_user_V_U_apdone_blk);

    regslice_both_phase_1_user_V_U : component regslice_both
    generic map (
        DataWidth => 9)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmpphases_user_V_reg_249_pp0_iter19_reg,
        vld_in => phase_1_TVALID_int,
        ack_in => regslice_both_phase_1_user_V_U_ack_in_dummy,
        data_out => phase_1_TUSER,
        vld_out => regslice_both_phase_1_user_V_U_vld_out,
        ack_out => phase_1_TREADY,
        apdone_blk => regslice_both_phase_1_user_V_U_apdone_blk);

    regslice_both_phase_2_user_V_U : component regslice_both
    generic map (
        DataWidth => 9)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmpphases_user_V_reg_249_pp0_iter19_reg,
        vld_in => phase_2_TVALID_int,
        ack_in => regslice_both_phase_2_user_V_U_ack_in_dummy,
        data_out => phase_2_TUSER,
        vld_out => regslice_both_phase_2_user_V_U_vld_out,
        ack_out => phase_2_TREADY,
        apdone_blk => regslice_both_phase_2_user_V_U_apdone_blk);

    regslice_both_phase_3_user_V_U : component regslice_both
    generic map (
        DataWidth => 9)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmpphases_user_V_reg_249_pp0_iter19_reg,
        vld_in => phase_3_TVALID_int,
        ack_in => regslice_both_phase_3_user_V_U_ack_in_dummy,
        data_out => phase_3_TUSER,
        vld_out => regslice_both_phase_3_user_V_U_vld_out,
        ack_out => phase_3_TREADY,
        apdone_blk => regslice_both_phase_3_user_V_U_apdone_blk);

    regslice_both_w1_phase_0_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phase_0_TLAST_int,
        vld_in => phase_0_TVALID_int,
        ack_in => regslice_both_w1_phase_0_last_U_ack_in_dummy,
        data_out => phase_0_TLAST,
        vld_out => regslice_both_w1_phase_0_last_U_vld_out,
        ack_out => phase_0_TREADY,
        apdone_blk => regslice_both_w1_phase_0_last_U_apdone_blk);

    regslice_both_w1_phase_1_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phase_1_TLAST_int,
        vld_in => phase_1_TVALID_int,
        ack_in => regslice_both_w1_phase_1_last_U_ack_in_dummy,
        data_out => phase_1_TLAST,
        vld_out => regslice_both_w1_phase_1_last_U_vld_out,
        ack_out => phase_1_TREADY,
        apdone_blk => regslice_both_w1_phase_1_last_U_apdone_blk);

    regslice_both_w1_phase_2_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phase_2_TLAST_int,
        vld_in => phase_2_TVALID_int,
        ack_in => regslice_both_w1_phase_2_last_U_ack_in_dummy,
        data_out => phase_2_TLAST,
        vld_out => regslice_both_w1_phase_2_last_U_vld_out,
        ack_out => phase_2_TREADY,
        apdone_blk => regslice_both_w1_phase_2_last_U_apdone_blk);

    regslice_both_w1_phase_3_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phase_3_TLAST_int,
        vld_in => phase_3_TVALID_int,
        ack_in => regslice_both_w1_phase_3_last_U_ack_in_dummy,
        data_out => phase_3_TLAST,
        vld_out => regslice_both_w1_phase_3_last_U_vld_out,
        ack_out => phase_3_TREADY,
        apdone_blk => regslice_both_w1_phase_3_last_U_apdone_blk);

    regslice_both_phases_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phases_TDATA_int,
        vld_in => phases_TVALID_int,
        ack_in => phases_TREADY_int,
        data_out => phases_TDATA,
        vld_out => regslice_both_phases_data_V_U_vld_out,
        ack_out => phases_TREADY,
        apdone_blk => regslice_both_phases_data_V_U_apdone_blk);

    regslice_both_phases_user_V_U : component regslice_both
    generic map (
        DataWidth => 9)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmpphases_user_V_reg_249_pp0_iter19_reg,
        vld_in => phases_TVALID_int,
        ack_in => regslice_both_phases_user_V_U_ack_in_dummy,
        data_out => phases_TUSER,
        vld_out => regslice_both_phases_user_V_U_vld_out,
        ack_out => phases_TREADY,
        apdone_blk => regslice_both_phases_user_V_U_apdone_blk);

    regslice_both_w1_phases_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phases_TLAST_int,
        vld_in => phases_TVALID_int,
        ack_in => regslice_both_w1_phases_last_U_ack_in_dummy,
        data_out => phases_TLAST,
        vld_out => regslice_both_w1_phases_last_U_vld_out,
        ack_out => phases_TREADY,
        apdone_blk => regslice_both_w1_phases_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_cart_V_0_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_548)) then
                if ((ap_sig_allocacmp_read_load = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_cart_V_0_reg_240 <= trunc_ln321_fu_381_p1;
                elsif ((read_load_load_fu_327_p1 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter1_cart_V_0_reg_240 <= in_data_V_4;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_cart_V_0_reg_240 <= ap_phi_reg_pp0_iter0_cart_V_0_reg_240;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_cart_V_1_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_548)) then
                if ((ap_sig_allocacmp_read_load = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_cart_V_1_reg_231 <= instream_TDATA_int(63 downto 32);
                elsif ((read_load_load_fu_327_p1 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter1_cart_V_1_reg_231 <= in_data_V_5;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_cart_V_1_reg_231 <= ap_phi_reg_pp0_iter0_cart_V_1_reg_231;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_cart_V_2_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_548)) then
                if ((ap_sig_allocacmp_read_load = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_cart_V_2_reg_222 <= instream_TDATA_int(95 downto 64);
                elsif ((read_load_load_fu_327_p1 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter1_cart_V_2_reg_222 <= in_data_V_6;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_cart_V_2_reg_222 <= ap_phi_reg_pp0_iter0_cart_V_2_reg_222;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_cart_V_3_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_548)) then
                if ((ap_sig_allocacmp_read_load = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_cart_V_3_reg_213 <= instream_TDATA_int(127 downto 96);
                elsif ((read_load_load_fu_327_p1 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter1_cart_V_3_reg_213 <= in_data_V_7;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_cart_V_3_reg_213 <= ap_phi_reg_pp0_iter0_cart_V_3_reg_213;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_storemerge_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_548)) then
                if ((ap_sig_allocacmp_read_load = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_storemerge_reg_264 <= ap_const_lv1_0;
                elsif ((read_load_load_fu_327_p1 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter1_storemerge_reg_264 <= ap_const_lv1_1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_storemerge_reg_264 <= ap_phi_reg_pp0_iter0_storemerge_reg_264;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_tmpphases_last_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_548)) then
                if ((ap_sig_allocacmp_read_load = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_tmpphases_last_reg_277 <= ap_const_lv1_0;
                elsif ((read_load_load_fu_327_p1 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter1_tmpphases_last_reg_277 <= in_last;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter0_tmpphases_last_reg_277;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_tmpphases_user_V_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_548)) then
                if ((ap_sig_allocacmp_read_load = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_tmpphases_user_V_reg_249 <= out_user_V_1_fu_491_p3;
                elsif ((read_load_load_fu_327_p1 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter1_tmpphases_user_V_reg_249 <= out_user_V_fu_363_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_tmpphases_user_V_reg_249 <= ap_phi_reg_pp0_iter0_tmpphases_user_V_reg_249;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln415_1_reg_1077 <= add_ln415_1_fu_843_p2;
                add_ln415_2_reg_1082 <= add_ln415_2_fu_855_p2;
                add_ln415_3_reg_1087 <= add_ln415_3_fu_867_p2;
                add_ln415_4_reg_1092 <= add_ln415_4_fu_879_p2;
                add_ln415_5_reg_1097 <= add_ln415_5_fu_891_p2;
                add_ln415_6_reg_1102 <= add_ln415_6_fu_903_p2;
                add_ln415_7_reg_1107 <= add_ln415_7_fu_915_p2;
                add_ln415_reg_1072 <= add_ln415_fu_831_p2;
                tmpphases_user_V_reg_249_pp0_iter10_reg <= tmpphases_user_V_reg_249_pp0_iter9_reg;
                tmpphases_user_V_reg_249_pp0_iter11_reg <= tmpphases_user_V_reg_249_pp0_iter10_reg;
                tmpphases_user_V_reg_249_pp0_iter12_reg <= tmpphases_user_V_reg_249_pp0_iter11_reg;
                tmpphases_user_V_reg_249_pp0_iter13_reg <= tmpphases_user_V_reg_249_pp0_iter12_reg;
                tmpphases_user_V_reg_249_pp0_iter14_reg <= tmpphases_user_V_reg_249_pp0_iter13_reg;
                tmpphases_user_V_reg_249_pp0_iter15_reg <= tmpphases_user_V_reg_249_pp0_iter14_reg;
                tmpphases_user_V_reg_249_pp0_iter16_reg <= tmpphases_user_V_reg_249_pp0_iter15_reg;
                tmpphases_user_V_reg_249_pp0_iter17_reg <= tmpphases_user_V_reg_249_pp0_iter16_reg;
                tmpphases_user_V_reg_249_pp0_iter18_reg <= tmpphases_user_V_reg_249_pp0_iter17_reg;
                tmpphases_user_V_reg_249_pp0_iter19_reg <= tmpphases_user_V_reg_249_pp0_iter18_reg;
                tmpphases_user_V_reg_249_pp0_iter2_reg <= tmpphases_user_V_reg_249;
                tmpphases_user_V_reg_249_pp0_iter3_reg <= tmpphases_user_V_reg_249_pp0_iter2_reg;
                tmpphases_user_V_reg_249_pp0_iter4_reg <= tmpphases_user_V_reg_249_pp0_iter3_reg;
                tmpphases_user_V_reg_249_pp0_iter5_reg <= tmpphases_user_V_reg_249_pp0_iter4_reg;
                tmpphases_user_V_reg_249_pp0_iter6_reg <= tmpphases_user_V_reg_249_pp0_iter5_reg;
                tmpphases_user_V_reg_249_pp0_iter7_reg <= tmpphases_user_V_reg_249_pp0_iter6_reg;
                tmpphases_user_V_reg_249_pp0_iter8_reg <= tmpphases_user_V_reg_249_pp0_iter7_reg;
                tmpphases_user_V_reg_249_pp0_iter9_reg <= tmpphases_user_V_reg_249_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter9_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter10_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter11_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter12_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter13_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter14_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter15_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter16_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter17_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter19_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter18_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter20_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter19_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter1_tmpphases_last_reg_277;
                read_r <= ap_phi_reg_pp0_iter1_storemerge_reg_264;
                tmpphases_user_V_reg_249 <= ap_phi_reg_pp0_iter1_tmpphases_user_V_reg_249;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter2_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter3_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter4_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter5_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter6_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter7_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_tmpphases_last_reg_277 <= ap_phi_reg_pp0_iter8_tmpphases_last_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln414_1_reg_1007 <= icmp_ln414_1_fu_579_p2;
                icmp_ln414_2_reg_1017 <= icmp_ln414_2_fu_617_p2;
                icmp_ln414_3_reg_1027 <= icmp_ln414_3_fu_659_p2;
                icmp_ln414_4_reg_1037 <= icmp_ln414_4_fu_697_p2;
                icmp_ln414_5_reg_1047 <= icmp_ln414_5_fu_739_p2;
                icmp_ln414_6_reg_1057 <= icmp_ln414_6_fu_777_p2;
                icmp_ln414_7_reg_1067 <= icmp_ln414_7_fu_819_p2;
                icmp_ln414_reg_997 <= icmp_ln414_fu_537_p2;
                trunc_ln708_1_reg_1002 <= ap_phi_reg_pp0_iter1_cart_V_0_reg_240(31 downto 17);
                trunc_ln708_2_reg_1012 <= ap_phi_reg_pp0_iter1_cart_V_1_reg_231(15 downto 1);
                trunc_ln708_3_reg_1022 <= ap_phi_reg_pp0_iter1_cart_V_1_reg_231(31 downto 17);
                trunc_ln708_4_reg_1032 <= ap_phi_reg_pp0_iter1_cart_V_2_reg_222(15 downto 1);
                trunc_ln708_5_reg_1042 <= ap_phi_reg_pp0_iter1_cart_V_2_reg_222(31 downto 17);
                trunc_ln708_6_reg_1052 <= ap_phi_reg_pp0_iter1_cart_V_3_reg_213(15 downto 1);
                trunc_ln708_7_reg_1062 <= ap_phi_reg_pp0_iter1_cart_V_3_reg_213(31 downto 17);
                trunc_ln_reg_992 <= ap_phi_reg_pp0_iter1_cart_V_0_reg_240(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                in_data_V_4 <= instream_TDATA_int(159 downto 128);
                in_data_V_5 <= instream_TDATA_int(191 downto 160);
                in_data_V_6 <= instream_TDATA_int(223 downto 192);
                in_data_V_7 <= instream_TDATA_int(255 downto 224);
                in_last <= (0=>instream_TLAST_int, others=>'-');
                in_user_V <= instream_TUSER_int;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln415_1_fu_843_p2 <= std_logic_vector(signed(sext_ln708_1_fu_837_p1) + signed(zext_ln415_1_fu_840_p1));
    add_ln415_2_fu_855_p2 <= std_logic_vector(signed(sext_ln708_2_fu_849_p1) + signed(zext_ln415_4_fu_852_p1));
    add_ln415_3_fu_867_p2 <= std_logic_vector(signed(sext_ln708_3_fu_861_p1) + signed(zext_ln415_5_fu_864_p1));
    add_ln415_4_fu_879_p2 <= std_logic_vector(signed(sext_ln708_4_fu_873_p1) + signed(zext_ln415_2_fu_876_p1));
    add_ln415_5_fu_891_p2 <= std_logic_vector(signed(sext_ln708_5_fu_885_p1) + signed(zext_ln415_6_fu_888_p1));
    add_ln415_6_fu_903_p2 <= std_logic_vector(signed(sext_ln708_6_fu_897_p1) + signed(zext_ln415_3_fu_900_p1));
    add_ln415_7_fu_915_p2 <= std_logic_vector(signed(sext_ln708_7_fu_909_p1) + signed(zext_ln415_7_fu_912_p1));
    add_ln415_fu_831_p2 <= std_logic_vector(signed(sext_ln708_fu_825_p1) + signed(zext_ln415_fu_828_p1));
    and_ln414_1_fu_569_p4 <= ((tmp_8_fu_553_p3 & ap_const_lv14_0) & tmp_9_fu_561_p3);
    and_ln414_2_fu_687_p4 <= ((tmp_13_fu_675_p3 & ap_const_lv14_0) & trunc_ln414_2_fu_683_p1);
    and_ln414_3_fu_767_p4 <= ((tmp_16_fu_755_p3 & ap_const_lv14_0) & trunc_ln414_3_fu_763_p1);
    and_ln414_4_fu_607_p4 <= ((tmp_10_fu_595_p3 & ap_const_lv14_0) & trunc_ln414_1_fu_603_p1);
    and_ln414_5_fu_649_p4 <= ((tmp_11_fu_633_p3 & ap_const_lv14_0) & tmp_12_fu_641_p3);
    and_ln414_6_fu_729_p4 <= ((tmp_14_fu_713_p3 & ap_const_lv14_0) & tmp_15_fu_721_p3);
    and_ln414_7_fu_809_p4 <= ((tmp_17_fu_793_p3 & ap_const_lv14_0) & tmp_18_fu_801_p3);
    and_ln_fu_527_p4 <= ((tmp_fu_515_p3 & ap_const_lv14_0) & trunc_ln414_fu_523_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter21, regslice_both_phase_0_data_V_U_apdone_blk, regslice_both_phase_1_data_V_U_apdone_blk, regslice_both_phase_2_data_V_U_apdone_blk, regslice_both_phase_3_data_V_U_apdone_blk, regslice_both_phases_data_V_U_apdone_blk, ap_sig_allocacmp_read_load, instream_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and ((regslice_both_phases_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_3_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_2_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_1_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_0_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (instream_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_block_state21_io, regslice_both_phase_0_data_V_U_apdone_blk, regslice_both_phase_1_data_V_U_apdone_blk, regslice_both_phase_2_data_V_U_apdone_blk, regslice_both_phase_3_data_V_U_apdone_blk, regslice_both_phases_data_V_U_apdone_blk, ap_block_state22_io, ap_sig_allocacmp_read_load, instream_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state22_io) or (regslice_both_phases_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_3_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_2_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_1_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_0_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state21_io) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)) or ((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (instream_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp125_assign_proc : process(ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_block_state21_io, regslice_both_phase_0_data_V_U_apdone_blk, regslice_both_phase_1_data_V_U_apdone_blk, regslice_both_phase_2_data_V_U_apdone_blk, regslice_both_phase_3_data_V_U_apdone_blk, regslice_both_phases_data_V_U_apdone_blk, ap_block_state22_io, ap_sig_allocacmp_read_load, instream_TVALID_int)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp125 <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state22_io) or (regslice_both_phases_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_3_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_2_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_1_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_0_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state21_io) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)) or ((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (instream_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp126_assign_proc : process(ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_block_state21_io, regslice_both_phase_0_data_V_U_apdone_blk, regslice_both_phase_1_data_V_U_apdone_blk, regslice_both_phase_2_data_V_U_apdone_blk, regslice_both_phase_3_data_V_U_apdone_blk, regslice_both_phases_data_V_U_apdone_blk, ap_block_state22_io, ap_sig_allocacmp_read_load, instream_TVALID_int)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp126 <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state22_io) or (regslice_both_phases_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_3_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_2_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_1_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_0_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state21_io) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)) or ((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (instream_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp127_assign_proc : process(ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_block_state21_io, regslice_both_phase_0_data_V_U_apdone_blk, regslice_both_phase_1_data_V_U_apdone_blk, regslice_both_phase_2_data_V_U_apdone_blk, regslice_both_phase_3_data_V_U_apdone_blk, regslice_both_phases_data_V_U_apdone_blk, ap_block_state22_io, ap_sig_allocacmp_read_load, instream_TVALID_int)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp127 <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state22_io) or (regslice_both_phases_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_3_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_2_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_1_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_0_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state21_io) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)) or ((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (instream_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp128_assign_proc : process(ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_block_state21_io, regslice_both_phase_0_data_V_U_apdone_blk, regslice_both_phase_1_data_V_U_apdone_blk, regslice_both_phase_2_data_V_U_apdone_blk, regslice_both_phase_3_data_V_U_apdone_blk, regslice_both_phases_data_V_U_apdone_blk, ap_block_state22_io, ap_sig_allocacmp_read_load, instream_TVALID_int)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp128 <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state22_io) or (regslice_both_phases_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_3_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_2_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_1_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_0_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state21_io) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)) or ((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (instream_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_block_state21_io, regslice_both_phase_0_data_V_U_apdone_blk, regslice_both_phase_1_data_V_U_apdone_blk, regslice_both_phase_2_data_V_U_apdone_blk, regslice_both_phase_3_data_V_U_apdone_blk, regslice_both_phases_data_V_U_apdone_blk, ap_block_state22_io, ap_sig_allocacmp_read_load, instream_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state22_io) or (regslice_both_phases_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_3_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_2_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_1_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_0_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state21_io) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)) or ((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (instream_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_sig_allocacmp_read_load, instream_TVALID_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (instream_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call24_assign_proc : process(ap_sig_allocacmp_read_load, instream_TVALID_int)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call24 <= ((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (instream_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call42_assign_proc : process(ap_sig_allocacmp_read_load, instream_TVALID_int)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call42 <= ((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (instream_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call60_assign_proc : process(ap_sig_allocacmp_read_load, instream_TVALID_int)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call60 <= ((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (instream_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call78_assign_proc : process(ap_sig_allocacmp_read_load, instream_TVALID_int)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call78 <= ((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (instream_TVALID_int = ap_const_logic_0));
    end process;

        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_io_assign_proc : process(phase_0_TREADY_int, phase_1_TREADY_int, phase_2_TREADY_int, phase_3_TREADY_int, phases_TREADY_int)
    begin
                ap_block_state21_io <= ((phases_TREADY_int = ap_const_logic_0) or (phase_3_TREADY_int = ap_const_logic_0) or (phase_2_TREADY_int = ap_const_logic_0) or (phase_1_TREADY_int = ap_const_logic_0) or (phase_0_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_io_assign_proc : process(phase_0_TREADY_int, phase_1_TREADY_int, phase_2_TREADY_int, phase_3_TREADY_int, phases_TREADY_int)
    begin
                ap_block_state22_io <= ((phases_TREADY_int = ap_const_logic_0) or (phase_3_TREADY_int = ap_const_logic_0) or (phase_2_TREADY_int = ap_const_logic_0) or (phase_1_TREADY_int = ap_const_logic_0) or (phase_0_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state22_pp0_stage0_iter21_assign_proc : process(regslice_both_phase_0_data_V_U_apdone_blk, regslice_both_phase_1_data_V_U_apdone_blk, regslice_both_phase_2_data_V_U_apdone_blk, regslice_both_phase_3_data_V_U_apdone_blk, regslice_both_phases_data_V_U_apdone_blk)
    begin
                ap_block_state22_pp0_stage0_iter21 <= ((regslice_both_phases_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_3_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_2_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_1_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_0_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state22_pp0_stage0_iter21_ignore_call24_assign_proc : process(regslice_both_phase_0_data_V_U_apdone_blk, regslice_both_phase_1_data_V_U_apdone_blk, regslice_both_phase_2_data_V_U_apdone_blk, regslice_both_phase_3_data_V_U_apdone_blk, regslice_both_phases_data_V_U_apdone_blk)
    begin
                ap_block_state22_pp0_stage0_iter21_ignore_call24 <= ((regslice_both_phases_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_3_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_2_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_1_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_0_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state22_pp0_stage0_iter21_ignore_call42_assign_proc : process(regslice_both_phase_0_data_V_U_apdone_blk, regslice_both_phase_1_data_V_U_apdone_blk, regslice_both_phase_2_data_V_U_apdone_blk, regslice_both_phase_3_data_V_U_apdone_blk, regslice_both_phases_data_V_U_apdone_blk)
    begin
                ap_block_state22_pp0_stage0_iter21_ignore_call42 <= ((regslice_both_phases_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_3_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_2_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_1_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_0_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state22_pp0_stage0_iter21_ignore_call60_assign_proc : process(regslice_both_phase_0_data_V_U_apdone_blk, regslice_both_phase_1_data_V_U_apdone_blk, regslice_both_phase_2_data_V_U_apdone_blk, regslice_both_phase_3_data_V_U_apdone_blk, regslice_both_phases_data_V_U_apdone_blk)
    begin
                ap_block_state22_pp0_stage0_iter21_ignore_call60 <= ((regslice_both_phases_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_3_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_2_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_1_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_0_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state22_pp0_stage0_iter21_ignore_call78_assign_proc : process(regslice_both_phase_0_data_V_U_apdone_blk, regslice_both_phase_1_data_V_U_apdone_blk, regslice_both_phase_2_data_V_U_apdone_blk, regslice_both_phase_3_data_V_U_apdone_blk, regslice_both_phases_data_V_U_apdone_blk)
    begin
                ap_block_state22_pp0_stage0_iter21_ignore_call78 <= ((regslice_both_phases_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_3_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_2_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_1_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_phase_0_data_V_U_apdone_blk = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call78 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_548_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_548 <= ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_cart_V_0_reg_240 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_cart_V_1_reg_231 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_cart_V_2_reg_222 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_cart_V_3_reg_213 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_storemerge_reg_264 <= "X";
    ap_phi_reg_pp0_iter0_tmpphases_last_reg_277 <= "X";
    ap_phi_reg_pp0_iter0_tmpphases_user_V_reg_249 <= "XXXXXXXXX";
    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_read_load_assign_proc : process(read_r, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_phi_reg_pp0_iter1_storemerge_reg_264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_sig_allocacmp_read_load <= ap_phi_reg_pp0_iter1_storemerge_reg_264;
        else 
            ap_sig_allocacmp_read_load <= read_r;
        end if; 
    end process;


    grp_cordic_base_fu_299_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp125)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp125) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_cordic_base_fu_299_ap_ce <= ap_const_logic_1;
        else 
            grp_cordic_base_fu_299_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_cordic_base_fu_306_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp126)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp126) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_cordic_base_fu_306_ap_ce <= ap_const_logic_1;
        else 
            grp_cordic_base_fu_306_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_cordic_base_fu_313_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp127)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_cordic_base_fu_313_ap_ce <= ap_const_logic_1;
        else 
            grp_cordic_base_fu_313_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_cordic_base_fu_320_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp128)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp128) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_cordic_base_fu_320_ap_ce <= ap_const_logic_1;
        else 
            grp_cordic_base_fu_320_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln414_1_fu_579_p2 <= "1" when (and_ln414_1_fu_569_p4 = ap_const_lv16_8001) else "0";
    icmp_ln414_2_fu_617_p2 <= "1" when (and_ln414_4_fu_607_p4 = ap_const_lv16_8001) else "0";
    icmp_ln414_3_fu_659_p2 <= "1" when (and_ln414_5_fu_649_p4 = ap_const_lv16_8001) else "0";
    icmp_ln414_4_fu_697_p2 <= "1" when (and_ln414_2_fu_687_p4 = ap_const_lv16_8001) else "0";
    icmp_ln414_5_fu_739_p2 <= "1" when (and_ln414_6_fu_729_p4 = ap_const_lv16_8001) else "0";
    icmp_ln414_6_fu_777_p2 <= "1" when (and_ln414_3_fu_767_p4 = ap_const_lv16_8001) else "0";
    icmp_ln414_7_fu_819_p2 <= "1" when (and_ln414_7_fu_809_p4 = ap_const_lv16_8001) else "0";
    icmp_ln414_fu_537_p2 <= "1" when (and_ln_fu_527_p4 = ap_const_lv16_8001) else "0";

    instream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_sig_allocacmp_read_load, instream_TVALID_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_sig_allocacmp_read_load = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            instream_TDATA_blk_n <= instream_TVALID_int;
        else 
            instream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    instream_TREADY_assign_proc : process(instream_TVALID, regslice_both_instream_data_V_U_ack_in)
    begin
        if (((instream_TVALID = ap_const_logic_1) and (regslice_both_instream_data_V_U_ack_in = ap_const_logic_1))) then 
            instream_TREADY <= ap_const_logic_1;
        else 
            instream_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    instream_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_sig_allocacmp_read_load)
    begin
        if (((ap_sig_allocacmp_read_load = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            instream_TREADY_int <= ap_const_logic_1;
        else 
            instream_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    out_user_V_1_fu_491_p3 <= (instream_TUSER_int & ap_const_lv1_0);
    out_user_V_fu_363_p2 <= (shl_ln_fu_355_p3 or ap_const_lv9_1);

    phase_0_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, phase_0_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)))) then 
            phase_0_TDATA_blk_n <= phase_0_TREADY_int;
        else 
            phase_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    phase_0_TLAST_int <= ap_phi_reg_pp0_iter20_tmpphases_last_reg_277(0);
    phase_0_TVALID <= regslice_both_phase_0_data_V_U_vld_out;

    phase_0_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            phase_0_TVALID_int <= ap_const_logic_1;
        else 
            phase_0_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    phase_1_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, phase_1_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)))) then 
            phase_1_TDATA_blk_n <= phase_1_TREADY_int;
        else 
            phase_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    phase_1_TLAST_int <= ap_phi_reg_pp0_iter20_tmpphases_last_reg_277(0);
    phase_1_TVALID <= regslice_both_phase_1_data_V_U_vld_out;

    phase_1_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            phase_1_TVALID_int <= ap_const_logic_1;
        else 
            phase_1_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    phase_2_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, phase_2_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)))) then 
            phase_2_TDATA_blk_n <= phase_2_TREADY_int;
        else 
            phase_2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    phase_2_TLAST_int <= ap_phi_reg_pp0_iter20_tmpphases_last_reg_277(0);
    phase_2_TVALID <= regslice_both_phase_2_data_V_U_vld_out;

    phase_2_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            phase_2_TVALID_int <= ap_const_logic_1;
        else 
            phase_2_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    phase_3_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, phase_3_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)))) then 
            phase_3_TDATA_blk_n <= phase_3_TREADY_int;
        else 
            phase_3_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    phase_3_TLAST_int <= ap_phi_reg_pp0_iter20_tmpphases_last_reg_277(0);
    phase_3_TVALID <= regslice_both_phase_3_data_V_U_vld_out;

    phase_3_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            phase_3_TVALID_int <= ap_const_logic_1;
        else 
            phase_3_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    phases_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, phases_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)))) then 
            phases_TDATA_blk_n <= phases_TREADY_int;
        else 
            phases_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    phases_TDATA_int <= (((grp_cordic_base_fu_320_ap_return & grp_cordic_base_fu_313_ap_return) & grp_cordic_base_fu_306_ap_return) & grp_cordic_base_fu_299_ap_return);
    phases_TLAST_int <= ap_phi_reg_pp0_iter20_tmpphases_last_reg_277(0);
    phases_TVALID <= regslice_both_phases_data_V_U_vld_out;

    phases_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            phases_TVALID_int <= ap_const_logic_1;
        else 
            phases_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    read_load_load_fu_327_p1 <= ap_sig_allocacmp_read_load;
        sext_ln708_1_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_1_reg_1002),16));

        sext_ln708_2_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2_reg_1012),16));

        sext_ln708_3_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_3_reg_1022),16));

        sext_ln708_4_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_4_reg_1032),16));

        sext_ln708_5_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_5_reg_1042),16));

        sext_ln708_6_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_6_reg_1052),16));

        sext_ln708_7_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_7_reg_1062),16));

        sext_ln708_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_992),16));

    shl_ln_fu_355_p3 <= (in_user_V & ap_const_lv1_0);
    tmp_10_fu_595_p3 <= ap_phi_reg_pp0_iter1_cart_V_1_reg_231(15 downto 15);
    tmp_11_fu_633_p3 <= ap_phi_reg_pp0_iter1_cart_V_1_reg_231(31 downto 31);
    tmp_12_fu_641_p3 <= ap_phi_reg_pp0_iter1_cart_V_1_reg_231(16 downto 16);
    tmp_13_fu_675_p3 <= ap_phi_reg_pp0_iter1_cart_V_2_reg_222(15 downto 15);
    tmp_14_fu_713_p3 <= ap_phi_reg_pp0_iter1_cart_V_2_reg_222(31 downto 31);
    tmp_15_fu_721_p3 <= ap_phi_reg_pp0_iter1_cart_V_2_reg_222(16 downto 16);
    tmp_16_fu_755_p3 <= ap_phi_reg_pp0_iter1_cart_V_3_reg_213(15 downto 15);
    tmp_17_fu_793_p3 <= ap_phi_reg_pp0_iter1_cart_V_3_reg_213(31 downto 31);
    tmp_18_fu_801_p3 <= ap_phi_reg_pp0_iter1_cart_V_3_reg_213(16 downto 16);
    tmp_8_fu_553_p3 <= ap_phi_reg_pp0_iter1_cart_V_0_reg_240(31 downto 31);
    tmp_9_fu_561_p3 <= ap_phi_reg_pp0_iter1_cart_V_0_reg_240(16 downto 16);
    tmp_fu_515_p3 <= ap_phi_reg_pp0_iter1_cart_V_0_reg_240(15 downto 15);
    trunc_ln321_fu_381_p1 <= instream_TDATA_int(32 - 1 downto 0);
    trunc_ln414_1_fu_603_p1 <= ap_phi_reg_pp0_iter1_cart_V_1_reg_231(1 - 1 downto 0);
    trunc_ln414_2_fu_683_p1 <= ap_phi_reg_pp0_iter1_cart_V_2_reg_222(1 - 1 downto 0);
    trunc_ln414_3_fu_763_p1 <= ap_phi_reg_pp0_iter1_cart_V_3_reg_213(1 - 1 downto 0);
    trunc_ln414_fu_523_p1 <= ap_phi_reg_pp0_iter1_cart_V_0_reg_240(1 - 1 downto 0);
    zext_ln415_1_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln414_1_reg_1007),16));
    zext_ln415_2_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln414_4_reg_1037),16));
    zext_ln415_3_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln414_6_reg_1057),16));
    zext_ln415_4_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln414_2_reg_1017),16));
    zext_ln415_5_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln414_3_reg_1027),16));
    zext_ln415_6_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln414_5_reg_1047),16));
    zext_ln415_7_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln414_7_reg_1067),16));
    zext_ln415_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln414_reg_997),16));
end behav;
